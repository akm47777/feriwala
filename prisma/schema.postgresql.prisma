// PostgreSQL Prisma Schema
// Converted from MongoDB

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  phone       String?  @unique
  firstName   String
  lastName    String
  avatar      String?
  role        UserRole @default(CUSTOMER)
  isVerified  Boolean  @default(false)
  password    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  reseller      Reseller?
  otps          Otp[]

  @@map("users")
}

model Otp {
  id        String     @id @default(uuid())
  userId    String?    // Optional for registration flow
  email     String
  phone     String?
  code      String
  type      OtpType
  purpose   OtpPurpose
  isUsed    Boolean    @default(false)
  expiresAt DateTime
  createdAt DateTime   @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, type, isUsed])
  @@index([phone, type, isUsed])
  @@map("otps")
}

model Address {
  id           String      @id @default(uuid())
  userId       String
  type         AddressType @default(HOME)
  firstName    String
  lastName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  pincode      String
  country      String      @default("India")
  isDefault    Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  image       String?
  parentId    String?
  type        CategoryType @default(CLOTHING)
  gender      Gender?
  ageGroup    AgeGroup?
  isActive    Boolean      @default(true)
  sortOrder   Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  parent        Category?     @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children      Category[]    @relation("CategoryHierarchy")
  products      Product[]
  subcategories Subcategory[]

  @@map("categories")
}

model Subcategory {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  image       String?
  categoryId  String
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([categoryId, slug])
  @@map("subcategories")
}

model Product {
  id               String      @id @default(uuid())
  name             String
  description      String
  shortDescription String?
  price            Decimal     @db.Decimal(10, 2) // PostgreSQL supports Decimal
  originalPrice    Decimal     @db.Decimal(10, 2)
  discount         Decimal     @default(0) @db.Decimal(5, 2)
  images           String[]
  categoryId       String
  subcategoryId    String?
  brand            String
  sku              String      @unique
  stock            Int         @default(0)
  isActive         Boolean     @default(true)
  tags             String[]
  
  // Clothing-specific fields
  material         String?
  fabric           String?
  pattern          String?
  fit              FitType?
  sleeve           SleeveType?
  neckline         String?
  gender           Gender      @default(UNISEX)
  ageGroup         AgeGroup    @default(ADULT)
  season           Season?
  occasion         String?
  careInstructions String?
  
  // Dimensions for accessories
  weight           Decimal?    @db.Decimal(10, 2)
  length           Decimal?    @db.Decimal(10, 2)
  width            Decimal?    @db.Decimal(10, 2)
  height           Decimal?    @db.Decimal(10, 2)
  
  seoTitle         String?
  seoDescription   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  category       Category         @relation(fields: [categoryId], references: [id])
  subcategory    Subcategory?     @relation(fields: [subcategoryId], references: [id])
  variants       ProductVariant[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  wishlistItems  WishlistItem[]
  reviews        Review[]
  resellerSales  ResellerSale[]

  @@index([categoryId])
  @@index([subcategoryId])
  @@map("products")
}

model ProductVariant {
  id        String   @id @default(uuid())
  productId String
  size      String?
  color     String?
  colorHex  String?
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  sku       String   @unique
  images    String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  orderItems OrderItem[]

  @@unique([productId, size, color])
  @@index([productId])
  @@map("product_variants")
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  variantId String?
  quantity  Int      @default(1)
  addedAt   DateTime @default(now())

  // Relations
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([userId, productId, variantId])
  @@index([userId])
  @@map("cart_items")
}

model Order {
  id                String        @id @default(uuid())
  orderNumber       String        @unique
  userId            String
  shippingAddressId String
  billingAddressId  String
  paymentMethod     PaymentMethod
  paymentStatus     PaymentStatus @default(PENDING)
  orderStatus       OrderStatus   @default(PENDING)
  totalAmount       Decimal       @db.Decimal(10, 2)
  discount          Decimal       @default(0) @db.Decimal(10, 2)
  shippingCost      Decimal       @default(0) @db.Decimal(10, 2)
  finalAmount       Decimal       @db.Decimal(10, 2)
  notes             String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  user            User      @relation(fields: [userId], references: [id])
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address   @relation("BillingAddress", fields: [billingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@index([userId])
  @@index([orderNumber])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)

  // Relations
  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product         @relation(fields: [productId], references: [id])
  variant ProductVariant? @relation(fields: [variantId], references: [id])

  @@index([orderId])
  @@map("order_items")
}

model Payment {
  id               String        @id @default(uuid())
  orderId          String
  amount           Decimal       @db.Decimal(10, 2)
  method           PaymentMethod
  status           PaymentStatus @default(PENDING)
  gatewayOrderId   String?
  gatewayPaymentId String?
  gatewaySignature String?
  failureReason    String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("payments")
}

model WishlistItem {
  id        String   @id @default(uuid())
  userId    String
  productId String
  addedAt   DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@map("wishlist_items")
}

model Review {
  id           String   @id @default(uuid())
  userId       String
  productId    String
  orderId      String
  rating       Int      @db.SmallInt
  title        String
  comment      String
  images       String[]
  isVerified   Boolean  @default(false)
  helpfulCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId, orderId])
  @@index([productId])
  @@map("reviews")
}

model Reseller {
  id                String         @id @default(uuid())
  userId            String         @unique
  businessName      String?
  panNumber         String?
  gstNumber         String?
  accountNumber     String
  ifscCode          String
  accountHolderName String
  bankName          String
  branchName        String
  commissionRate    Decimal        @default(5.0) @db.Decimal(5, 2)
  totalEarnings     Decimal        @default(0) @db.Decimal(10, 2)
  pendingPayouts    Decimal        @default(0) @db.Decimal(10, 2)
  kycStatus         KycStatus      @default(PENDING)
  referralCode      String         @unique
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents KycDocument[]
  sales     ResellerSale[]
  payouts   ResellerPayout[]

  @@index([userId])
  @@map("resellers")
}

model KycDocument {
  id              String         @id @default(uuid())
  resellerId      String
  type            DocumentType
  fileUrl         String
  status          DocumentStatus @default(PENDING)
  rejectionReason String?
  uploadedAt      DateTime       @default(now())
  verifiedAt      DateTime?

  // Relations
  reseller Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@index([resellerId])
  @@map("kyc_documents")
}

model ResellerSale {
  id             String     @id @default(uuid())
  resellerId     String
  productId      String
  orderId        String?
  quantity       Int        @default(1)
  saleAmount     Decimal    @db.Decimal(10, 2)
  commission     Decimal    @db.Decimal(10, 2)
  commissionRate Decimal    @db.Decimal(5, 2)
  status         SaleStatus @default(PENDING)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  reseller Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id])

  @@index([resellerId])
  @@index([productId])
  @@map("reseller_sales")
}

model ResellerPayout {
  id          String       @id @default(uuid())
  resellerId  String
  amount      Decimal      @db.Decimal(10, 2)
  status      PayoutStatus @default(PENDING)
  utrNumber   String?
  processedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  reseller Reseller @relation(fields: [resellerId], references: [id], onDelete: Cascade)

  @@index([resellerId])
  @@map("reseller_payouts")
}

// Enums (same as MongoDB version)
enum UserRole {
  CUSTOMER
  RESELLER
  ADMIN
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum CategoryType {
  CLOTHING
  ACCESSORIES
  FOOTWEAR
}

enum Gender {
  MEN
  WOMEN
  UNISEX
}

enum AgeGroup {
  KIDS
  ADULT
}

enum FitType {
  REGULAR
  SLIM
  LOOSE
  OVERSIZED
}

enum SleeveType {
  FULL
  HALF
  SLEEVELESS
  THREE_QUARTER
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
  ALL_SEASON
}

enum PaymentMethod {
  CARD
  UPI
  NET_BANKING
  WALLET
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  AADHAAR
  PAN
  DRIVING_LICENSE
  PASSPORT
  GST_CERTIFICATE
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SaleStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum OtpType {
  EMAIL
  SMS
}

enum OtpPurpose {
  REGISTRATION
  LOGIN
  PASSWORD_RESET
  EMAIL_VERIFICATION
  PHONE_VERIFICATION
}
